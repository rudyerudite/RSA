from Crypto.Util.number import *

n = 135568509670260054049994954417860747085442883428459182441559553532993752593294067458983143521109377661295622146963670193783017382697726454953197805014428888491744355387957923382241961401063461549210355871385000347645387907568135032087942016502668629010859519249039662555733548461551175133582871220209515648241
ct = int("5d695edb47b81a303d162611f7d407579160ef8818929031e1e13ca20cb7094eddbb0658d95980e1753182c5d5c529fb45062891bb5da573c618e35df0103233ded582a53ed807846b19ea82be427f2bbc63e5c7eb685d8a22b2b7539cf45d4ad93bbf5b892b66288b568b6bbff6bb263d809475e6f0aa3cfd01539d8364c243",16)

e = [34961, 3617491, 68962801, 293200159531, 1191694878666066510321450623792489136756229172407332230462797663298426983932272792657383336660801913848162204216417540955677965706955404313949733712340714861638106185597684745174398501025724130404133569866642454996521744281284226124355987843894614599718553178595963014434904833]

def c_fraction(e,n):
	cf=[]
	q=e/n
	r=e%n
	cf.append(q)

	while (r!=0):
		e,n=n,r
		q=e/n
		r=e%n
		cf.append(q)
	return cf


def convergent(cf):
	#divide numerators and denominators into two different lists
	num = []
	denom = []
	conv = []
	for i in range(len(cf)):
		if(i==0):
			num.append(cf[0])
			denom.append(1)
		elif(i==1):
			num.append(cf[1]*cf[0]+1)
			denom.append(cf[1])
		else:
			num.append(cf[i]*num[i-1]+num[i-2])
			denom.append(cf[i]*denom[i-1]+denom[i-2])
		
	return num,denom
prod=1;
#print(l[1])
for i in range(len(e)):
	prod*=e[i]


k=c_fraction(prod,n)
l=convergent(k)
print(len(l[1]))
print("Tobias")
for i in l[1]:
	m=pow(ct,i,n)
	m=long_to_bytes(m)
	#print(m)
	if(m[:5]=='inctf'):
		print(m)
